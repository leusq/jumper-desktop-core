name: Build
on:
  workflow_call:
    inputs:
      upload-artifact:
        type: boolean
        default: true
      tag-name:
        type: string
        default: "draft"
      channel:
        type: string
        default: "dev"
  workflow_dispatch:
    inputs:
      upload-artifact:
        type: boolean
        default: true
      tag-name:
        type: string
        default: "draft"
      channel:
        type: string
        default: "dev"

jobs:
  build:
    permissions: write-all
    strategy:
      fail-fast: false
      matrix:
        job:
          - { name: "jumper-desktop-core-windows-amd64", os: 'ubuntu-latest', target: 'windows-amd64', aarch: 'x64' }
          - { name: "jumper-desktop-core-macos-universal", os: 'macos-12', target: 'macos-universal' }

    runs-on: ${{ matrix.job.os }}
    env:
      GOOS: ${{ matrix.job.goos }}
      GOARCH: ${{ matrix.job.goarch }}
      GOAMD64: ${{ matrix.job.goamd64 }}
      GOARM: ${{ matrix.job.goarm }}
      GOMIPS: ${{ matrix.job.gomips }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          check-latest: false
      - name: Setup MinGW
        if: startsWith(matrix.job.target,'windows')
        uses: egor-tensin/setup-mingw@v2
        with:
          platform: ${{ matrix.job.aarch }}
      - name: Setup macos
        if: startsWith(matrix.job.target,'macos')
        run: |
          brew install create-dmg tree coreutils
      - name: Build
        run: |
          make -j$(($(nproc) + 1)) ${{ matrix.job.target }}

      - name: zip
        run: |
          tree 
          rm -f /*.h */*.h
          rm ./hiddify-libcore*sources* ||echo "no source"
          rm ./hiddify-libcore-macos-a*.dylib || echo "no macos arm and amd"
          files=$(ls | grep -E '^(libcore\.(dll|so|dylib|aar)|webui|Libcore.xcframework|lib|JumperCli(\.exe)?)$')
          echo tar -czvf ${{ matrix.job.name }}.tar.gz  $files
          tar -czvf ${{ matrix.job.name }}.tar.gz  $files

        working-directory: bin
      - uses: actions/upload-artifact@v4
        if: ${{ success() }}
        with:
          name: ${{ matrix.job.name }}
          path: bin/*.tar.gz
          retention-days: 1


  upload-prerelease:
    permissions: write-all
    if: ${{ inputs.upload-artifact }}
    needs: [ build ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          merge-multiple: true
          pattern: hiddify-*
          path: bin/

      - name: Display Files Structure
        run: tree
        working-directory: bin

      - name: Delete Current Release Assets
        uses: 8Mi-Tech/delete-release-assets-action@main
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tag: 'draft'
          deleteOnlyFromDrafts: false

      - name: Create or Update Draft Release
        uses: softprops/action-gh-release@v1
        if: ${{ success() }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: ./bin/*.tar.gz
          name: 'draft'
          tag_name: 'draft'
          prerelease: true

  upload-release:
    permissions: write-all
    if: ${{ inputs.channel=='prod' }}
    needs: [ build ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          merge-multiple: true
          pattern: hiddify-*
          path: bin/

      - name: Display Files Structure
        run: ls -R
        working-directory: bin

      - name: Upload Release
        uses: softprops/action-gh-release@v1
        if: ${{ success() }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ inputs.tag-name  }}

          files: bin/*.tar.gz
